spring:
  datasource:
    url: jdbc:postgresql://${DEV_DB_HOST}/${DEV_DB_NAME}
    username: ${DEV_DB_USERNAME}
    password: ${DEV_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  #google oauth2
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_SECRET}
            scope:
              - profile
              - email
              # Google People API, V1
              # 테스트 단계 에서는 생략하고 진행
              # - https://www.googleapis.com/auth/user.birthday.read
              # - https://www.googleapis.com/auth/user.gender.read
              # - https://www.googleapis.com/auth/user.phonenumbers.read
            redirect-uri: ${DEV_OAUTH_REDIRECT_URI}
        provider:
          google:
            # 사용자에게 항상 로그인할 계정을 선택하게 함
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth?prompt=select_account

  #multipart
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true

logging:
  level:
    root: info

#aws
cloud:
  aws:
    region:
      static: ap-northeast-2
    credentials:
      access-key: ${LOCAL_AWS_USER_ACCESS_KEY}
      secret-key: ${LOCAL_AWS_USER_SECRET_KEY}
    s3:
      bucket: ${LOCAL_AWS_S3_NAME}
    stack:
      auto: false

#jwt
jwt:
  secret: ${DEV_JWT_SECRET_KEY}
  expiration: 3600000 # 1000 * 60 * 60 ( 1 hour )
  refresh-expiration: 604800000 # 1000 * 60 * 60 * 24 * 7 ( 1 week )